/// This is your Prisma schema file,
/// learn more about it in the docs: https:///pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator docs {
    provider = "node node_modules/prisma-docs-generator"
    output   = "./docs"
}

generator trpc {
    provider          = "trpc-generator"
    output            = "../src/trpc/generated"
    withMiddleware    = true
    withShield        = true
    contextPath       = "../src/backend/context"
    trpcOptionsPath   = "../src/backend/options"
    isGenerateSelect  = false
    isGenerateInclude = false
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Sanity {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isSane    Boolean  @default(false)
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id") @db.ObjectId
    account_type      String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime @map("expiresAt")
    user         User     @relation(fields: [userId], references: [id])

    @@map("sessions")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime @map("expiresAt")

    @@unique([identifier, token])
    @@map("verification_tokens")
}

///Base user data that discord provides
model User {
    ///Users ID (snowflake)
    id            String    @id @map("_id") @db.ObjectId
    ///User name, not unique
    username      String
    ///Users four digit discord tag
    discriminator String
    ///Users avatar
    avatar        String?
    ///Is the user a bot?
    bot           Boolean?
    ///Is the user a Discord System user?
    system        Boolean?
    ///MFA Enabled?
    mfa_enabled   Boolean?
    ///Banner
    banner        String?
    ///Accent Color
    accent_color  Int?
    ///Locale
    locale        String?
    ///Verified?
    verified      Boolean?
    ///Email
    email         String?   @unique
    ///Is the email verified?
    emailVerified DateTime? @map("email_verified")
    ///Flags
    flags         Int?
    ///Premium type
    premium_type  Int?
    ///Public Flags
    public_flags  Int?
    ///Users guilds
    guilds        Guild[]   @relation(fields: [guildIds], references: [id])
    guildIds      String[]  @db.ObjectId
    ///User Created Emojis
    emojis        Emoji[]   @relation(fields: [emojiIds], references: [id])
    emojiIds      String[]  @db.ObjectId
    ///Messages
    Messages      Message[] @relation(fields: [messageIds], references: [id])
    messageIds    String[]  @db.ObjectId
    ///Channels
    channels      Channel[] @relation(fields: [channelIds], references: [id])
    channelIds    String[]  @db.ObjectId
    ///Next-auth Accounts
    accounts      Account[]
    ///Next-auth Sessions
    sessions      Session[]

    @@map("users")
}

enum Features {
    ANIMATED_BANNER
    ANIMATED_ICON
    APPLICATION_COMMAND_PERMISSIONS_V2
    AUTO_MODERATION
    BANNER
    COMMUNITY
    DEVELOPER_SUPPORT_SERVER
    DISCOVERABLE
    FEATURABLE
    INVITES_DISABLED
    INVITE_SPLASH
    MEMBER_VERIFICATION_GATE_ENABLED
    MONETIZATION_ENABLED
    MORE_STICKERS
    NEWS
    PARTNERED
    PREVIEW_ENABLED
    ROLE_ICONS
    TICKETED_EVENTS_ENABLED
    VANITY_URL
    VERIFIED
    VIP_REGIONS
    WELCOME_SCREEN_ENABLED
}

model Guild {
    ///Discord snowflake
    id                            String     @id @map("_id") @db.ObjectId
    ///Guild name
    name                          String
    ///Guild icon
    icon                          String?
    ///Icon Hash
    icon_hash                     String?
    ///Guild splash
    splash                        String?
    ///Guild discovery splash
    discovery_splash              String?
    ///Guild owner ID (snowflake)
    owner_id                      String?
    ///Permissions for the guild owner
    permissions                   String?
    ///Guild region
    region                        String?
    ///Guild AFK channel ID (snowflake)
    afk_channel_id                String?
    ///AFK timeout in seconds
    afk_timeout                   Int?
    ///Widget enabled?
    widget_enabled                Boolean?
    ///Widget channel ID (snowflake)
    widget_channel_id             String?
    ///Verification level
    /// NONE	0	unrestricted
    /// LOW	1	must have verified email on account
    /// MEDIUM	2	must be registered on Discord for longer than 5 minutes
    /// HIGH	3	must be a member of the server for longer than 10 minutes
    /// VERY_HIGH	4	must have a verified phone number
    verification_level            Int?
    ///Default message notifications level
    default_message_notifications Int?
    ///Explicit content filter level
    /// LEVEL	INTEGER	DESCRIPTION
    /// DISABLED	0	media content will not be scanned
    /// MEMBERS_WITHOUT_ROLES	1	media content sent by members without roles will be scanned
    /// ALL_MEMBERS	2	media content sent by all members will be scanned
    explicit_content_filter       Int?
    ///Roles in the guild
    roles                         Role[]
    ///Custom guild emojis
    emojis                        Emoji[]
    ///Enabled guild features
    features                      Features[]
    ///MFA level required for the guild
    /// NONE	0	guild has no MFA/2FA requirement for moderation actions
    /// ELEVATED	1	guild has a 2FA requirement for moderation actions
    mfa_level                     Int
    ///Application ID of the guild creator if it is bot-created
    application_id                String?
    ///System channel ID (snowflake)
    system_channel_id             String?
    ///System channel flags
    /// SUPPRESS_JOIN_NOTIFICATIONS	1 << 0	Suppress member join notifications
    /// SUPPRESS_PREMIUM_SUBSCRIPTIONS	1 << 1	Suppress server boost notifications
    /// SUPPRESS_GUILD_REMINDER_NOTIFICATIONS	1 << 2	Suppress server setup tips
    /// SUPPRESS_JOIN_NOTIFICATION_REPLIES	1 << 3	Hide member join sticker reply buttons
    system_channel_flags          Int
    ///Rules channel ID (snowflake)
    rules_channel_id              String?
    ///The maximum number of presences for the guild (null is always returned, apart from the largest of guilds)
    max_presences                 Int?
    ///The maximum number of members for the guild
    max_members                   Int?
    ///The vanity URL code for the guild
    vanity_url_code               String?
    ///The description for the guild, if the guild is discoverable
    description                   String?
    ///Banner
    banner                        String?
    ///Premium Tier (Server Boost level)
    /// NONE	0	guild has not unlocked any Server Boost perks
    /// TIER_1	1	guild has unlocked Server Boost level 1 perks
    /// TIER_2	2	guild has unlocked Server Boost level 2 perks
    /// TIER_3	3	guild has unlocked Server Boost level 3 perks
    premium_tier                  Int
    ///The number of boosts this guild currently has
    premium_subscription_count    Int
    ///The preferred locale of a guild with the "DISCOVERABLE" feature, defaults to "en-US"
    preferred_locale              String
    ///The public updates channel ID (snowflake)
    public_updates_channel_id     String?
    ///The maximum amount of users in a video channel
    max_video_channel_users       Int
    ///Approximate number of members in this guild
    approximate_member_count      Int?
    ///Approximate number of presences in this guild
    approximate_presence_count    Int?
    ///Guild NSFW level
    /// DEFAULT	0
    /// EXPLICIT	1
    /// SAFE	2
    /// AGE_RESTRICTED
    nsfw_level                    Int
    ///Premium progress bar?
    premium_progress_bar_enabled  Boolean?
    ///Users in Guild
    users                         User[]     @relation(fields: [userIds], references: [id])
    userIds                       String[]   @db.ObjectId
    ///Channels in Guild
    channels                      Channel[]  @relation(fields: [channelIds], references: [id])
    channelIds                    String[]   @db.ObjectId
}

model Role {
    ///Discord snowflake
    id            String   @id @map("_id") @db.ObjectId
    ///Role name
    name          String
    ///Color
    ///Roles without colors (color == 0) do not count towards the final computed color in the user list.
    color         Int
    ///Hoist?
    hoist         Boolean
    ///Icon
    icon          String?
    ///Unicode emoji
    unicode_emoji String?
    ///Position
    position      Int
    ///Permissions
    permissions   String
    ///Managed?
    managed       Boolean
    ///Mentionable?
    mentionable   Boolean
    ///Guild ID (snowflake)
    guild_id      String
    ///Connections
    Guild         Guild    @relation(fields: [guildId], references: [id])
    guildId       String   @db.ObjectId
    Emoji         Emoji?   @relation(fields: [emojiId], references: [id])
    emojiId       String?  @db.ObjectId
    Message       Message? @relation(fields: [messageId], references: [id])
    messageId     String?  @db.ObjectId
}

model Emoji {
    ///Discord snowflake
    id             String     @id @map("_id") @db.ObjectId
    ///Emoji name
    name           String
    ///Roles this emoji is whitelisted to
    roles          Role[]
    ///User that created this emoji
    users          User[]     @relation(fields: [userIds], references: [id])
    userIds        String[]   @db.ObjectId
    ///Emoji require_colons
    require_colons Boolean?
    ///Emoji managed
    managed        Boolean?
    ///Emoji animated
    animated       Boolean?
    ///Emoji available
    available      Boolean?
    ///Connections
    Guild          Guild      @relation(fields: [guildId], references: [id])
    guildId        String     @db.ObjectId
    ///Reactions
    reactions      Reaction[] @relation(fields: [reactionIds], references: [id])
    reactionIds    String[]   @db.ObjectId
}

model Reaction {
    ///Discord snowflake
    id         String    @id @map("_id") @db.ObjectId
    ///Count
    count      Int
    ///Emoji
    emojis     Emoji[]   @relation(fields: [emojiIds], references: [id])
    emojiIds   String[]  @db.ObjectId
    ///Message ID
    messages   Message[] @relation(fields: [messageIds], references: [id])
    messageIds String[]  @db.ObjectId
}

model Message {
    ///Discord snowflake
    id               String     @id @map("_id") @db.ObjectId
    ///Is thread
    thread           Boolean
    ///Channel ID
    channel_id       String
    ///Content
    content          String
    ///Timestamp
    timestamp        DateTime   @default(now())
    ///Edited timestamp
    edited_timestamp DateTime?
    ///TTS?
    tts              Boolean    @default(false)
    ///Mention everyone?
    mention_everyone Boolean    @default(false)
    ///Mention roles
    mention_roles    Role[]
    ///Reactions
    reactions        Reaction[] @relation(fields: [reactionIds], references: [id])
    reactionIds      String[]   @db.ObjectId
    ///Nonce
    nonce            String?    @default("")
    ///Pinned?
    pinned           Boolean    @default(false)
    ///Webhook ID
    webhook_id       String?    @default("")
    ///Message type
    message_type     Int
    ///Flags
    flags            Int?       @default(0)
    ///Application ID
    application_id   String?    @default("")
    ///Position
    position         Int?       @default(0)
    ///User
    users            User[]     @relation(fields: [userIds], references: [id])
    userIds          String[]   @db.ObjectId
    ///Channel
    channels         Channel[]  @relation(fields: [channelIds], references: [id])
    channelIds       String[]   @db.ObjectId
}

model Channel {
    ///Discord snowflake
    id                            String    @id @map("_id") @db.ObjectId
    ///Channel name
    name                          String
    /// GUILD_TEXT	0	a text channel within a server
    /// DM	1	a direct message between users
    /// GUILD_VOICE	2	a voice channel within a server
    /// GROUP_DM	3	a direct message between multiple users
    /// GUILD_CATEGORY	4	an organizational category that contains up to 50 channels
    /// GUILD_ANNOUNCEMENT	5	a channel that users can follow and crosspost into their own server (formerly news channels)
    /// ANNOUNCEMENT_THREAD	10	a temporary sub-channel within a GUILD_ANNOUNCEMENT channel
    /// PUBLIC_THREAD	11	a temporary sub-channel within a GUILD_TEXT or GUILD_FORUM channel
    /// PRIVATE_THREAD	12	a temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission
    /// GUILD_STAGE_VOICE	13	a voice channel for hosting events with an audience
    /// GUILD_DIRECTORY	14	the channel in a hub containing the listed servers
    /// GUILD_FORUM	15	Channel that can only contain threads
    /// Renamed due to TS issues.
    channel_type                  Int
    ///Is thread
    thread                        Boolean   @default(false)
    ///Channel position
    position                      Int?      @default(0)
    ///Channel topic
    topic                         String?
    ///Channel nsfw
    nsfw                          Boolean?
    ///Channel last message ID (snowflake)
    last_message_id               String?
    ///Channel bitrate (in bits)
    bitrate                       Int?      @default(96)
    ///Channel user limit
    user_limit                    Int?      @default(100)
    ///Channel rate limit per user (seconds)
    rate_limit_per_user           Int?      @default(0)
    ///Channel icon
    icon                          String?
    ///Channel owner ID (snowflake)
    owner_id                      String?
    ///Channel application ID (snowflake)
    application_id                String?
    ///Channel parent ID (snowflake)
    parent_id                     String?
    ///Channel last pin timestamp
    last_pin_timestamp            String?
    ///RTC region
    rtc_region                    String?
    ///Video quality mode
    /// AUTO	1	Discord chooses the quality for optimal performance
    /// FULL	2	720p
    video_quality_mode            String?
    ///Message count
    message_count                 Int?
    ///Member count
    member_count                  Int?
    ///Default auto archive duration
    default_auto_archive_duration Int?
    ///Permissions
    permissions                   String?
    ///Flags
    flags                         Int?
    ///Total message sent
    total_message_sent            Int?
    ///Guild
    guilds                        Guild[]   @relation(fields: [guildIds], references: [id])
    guildIds                      String[]  @db.ObjectId
    ///Messages
    Message                       Message[] @relation(fields: [messageIds], references: [id])
    messageIds                    String[]  @db.ObjectId
    ///Users
    users                         User[]    @relation(fields: [userIds], references: [id])
    userIds                       String[]  @db.ObjectId
}
